/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.IOException;  // Import the IOException class to handle errors

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s) {this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            CONCAT, LPAREN, RPAREN, COMMASEP, LCURLPAREN, RCURLPAREN, IF, ELSE, REVERSE, PREFIX, IDENTIFIER, KEYWORD;
terminal String    STRING_LITERAL;        // our scanner provides strings

/*  Non terminals */             
non terminal String     goal_prog, declarations, fun_decl, exp_calls, call, restIds, exp, restExpL, exp_list, prefix_exp, id_list, body;

/**
 *  Precedence Declarations
 */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;
precedence left COMMASEP;

/**
 *  The Grammar Rules
 */
goal_prog ::= declarations:d         {:
                                        try {  
                                                FileWriter myWriter = new FileWriter("Main.java");
                                                myWriter.write("public class Main {\n" +
                                                "\tpublic static String reverse_fun(String str){  //method for reversing String str\n" +
                                                "\t\tStringBuilder input1 = new StringBuilder();\n" +
                                                "\t\tinput1.append(str);\n" +
                                                "\t\tinput1 = input1.reverse();\n" +
                                                "\t\tString str1 = input1.toString();\n" +
                                                "\t\treturn str1;\n" +
                                                "\t}\n" +
                                                "\tpublic static boolean isPrefixOf(String str1, String str2){   //method for checking if str1 is prefix of str2\n" +
                                                "\t\treturn (str2).startsWith(str1);\n" +
                                                "\t}\n" +
                                                 d + "\n}");
                                                myWriter.close();
                                                System.out.println("Successfully wrote to the file.");
                                        } catch (IOException e) {
                                                System.out.println("An error occurred.");
                                                e.printStackTrace();
                                        }                                                 
                                                 :}
;

declarations ::= fun_decl:fd declarations:d  {:RESULT = fd + d;:}
                |exp_calls:ec                {:RESULT = "\tpublic static void main(String[] args) {\n" + ec + "\n\t}"; :}
;
exp_calls ::= exp:e exp_calls:ec          {:RESULT = "\t\tSystem.out.println(" + e + ");\n" + ec;:}
            |/*empty*/                   {:RESULT = "";:}
;

fun_decl ::= IDENTIFIER:id LPAREN id_list:idl  body:bd RCURLPAREN  {: RESULT = "\tpublic static String " + id + " (" + idl + "){\n\t\t" + bd + "\n\t}\n";:}
;

id_list ::=  IDENTIFIER:id restIds:rest  KEYWORD   {: RESULT = "String " + id + rest; :}
            |KEYWORD       {: RESULT = ""; :}
;

restIds ::= COMMASEP IDENTIFIER:id restIds:rest  {: RESULT = ", String " + id + rest;:}
            |/*empty*/              {: RESULT = ""; :}
;

call ::= IDENTIFIER:id LPAREN exp_list:expl  RPAREN      {:RESULT = (  id + "(" + expl + ")" ); :}
;


exp_list ::= exp:e1 restExpL:restl      {: RESULT = e1 + restl; :}
            |/*empty*/         {: RESULT = ""; :}
;

restExpL ::= COMMASEP exp:e2 restExpL:restl  {: RESULT = ", " + e2 + restl;:}
            |/*empty*/             {: RESULT = ""; :}
;

body ::= exp:e1        {: RESULT = "return " + e1 + ";"; :}
        |/*empty*/  {:RESULT = "return \"\";";:}
;

exp ::= call:c                  {:RESULT = c;:} 
        |exp:e1 CONCAT exp:e2  {:RESULT = e1 + " + " + e2; :}
        |REVERSE exp:e1      {: RESULT = "reverse_fun(" + e1 + " )";:}
        |IF LPAREN prefix_exp:prexp RPAREN exp:e1 ELSE exp:e2 {: RESULT = "(" + prexp + " ? " + e1 + " : " + e2 + ")"; :}
        | STRING_LITERAL:s      {: RESULT = "\"" + s + "\"" ; :}
        | IDENTIFIER:id         {: RESULT = id.toString(); :}
        ;

prefix_exp ::= exp:e1 PREFIX exp:e2 {: RESULT = "isPrefixOf(" + e1 + ", " + e2 + ")"; :}
            ;