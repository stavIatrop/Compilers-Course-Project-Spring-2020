/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s) {this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            CONCAT, LPAREN, RPAREN, COMMASEP, LCURLPAREN, RCURLPAREN, IF, ELSE, REVERSE, PREFIX, IDENTIFIER;
terminal String    STRING_LITERAL;        // our scanner provides strings

/*  Non terminals */
non terminal              id_list, body;
non terminal String     goal_prog, declarations,fun_decl, fun_calls, call, restIds, exp,restExpL,exp_list, list;
non terminal Boolean prefix_exp;

/**
 *  Precedence Declarations
 */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/**
 *  The Grammar Rules
 */
goal_prog ::= declarations:d         {:System.out.println(d);:}
;

declarations ::= fun_decl:fd declarations:d  {:RESULT = fd + d;:}
                |fun_calls:fc                {:RESULT = fc;:}
;
fun_calls ::= call:c fun_calls:fc             {:RESULT = c + fc;:}
            |/*empty*/                        {:RESULT = "";:}
;

fun_decl ::= IDENTIFIER:id  id_list:idl   body:bd RCURLPAREN  {: RESULT = id + " (" + idl + "){\n\t" + bd + "\n}";:}
;

call ::= IDENTIFIER:id LPAREN exp_list:expl  RPAREN      {:RESULT = (id + "(" + expl + ")" ); :}
;

id_list ::= LPAREN IDENTIFIER:id restIds:rest  LCURLPAREN   {: RESULT = id + rest; :}
            | /*empty*/         {: RESULT = ""; :}
;

restIds ::= COMMASEP IDENTIFIER:id restIds:rest  {: RESULT = ", " + id + rest;:}
            |RPAREN              {: RESULT = ""; :}
;

exp_list ::= exp:e1 restExpL:restl      {: RESULT = e1 + restl; :}
            | /*empty*/         {: RESULT = ""; :}
;

restExpL ::= COMMASEP exp:e2 restExpL:restl  {: RESULT = ", " + e2 + restl;:}
            | /*empty*/             {: RESULT = ""; :}
;

body ::= exp:e1        {: RESULT = e1; :}
        |/*empty*/  {:RESULT = "";:}
;

exp ::= call:c                  {:RESULT = c;:} 
        |exp:e1 CONCAT exp:e2  {:RESULT = e1+e2; :}
        |REVERSE exp:e1      {:StringBuilder input1 = new StringBuilder();
                                    input1.append(e1);
                                    input1 = input1.reverse();
                                    String str1 = input1.toString();
                                    RESULT = str1;:}
        |IF LPAREN prefix_exp:prexp RPAREN exp:e1 ELSE exp:e2 {: RESULT = "if (" + prexp + ")\n\treturn " + e1 + ";\nelse\n\treturn " + e2 + ";\n"; :}
        | STRING_LITERAL:s      {: RESULT = s; :}
        | IDENTIFIER:id         {: RESULT = id.toString(); :}
        ;

prefix_exp ::= exp:e1 PREFIX exp:e2 {: RESULT = e2.startsWith(e1); :}
            ;








// reverse_exp ::= REVERSE exp:e1      {:StringBuilder input1 = new StringBuilder();
//                                     input1.append(e1);
//                                     input1 = input1.reverse();
//                                     String str1 = input1.toString();
//                                     RESULT = str1;:}
// ;

// concat_exp ::= exp:e1 CONCAT exp:e2  {:RESULT = e1+e2; :}
// ;

// exp ::= call:c                {: System.out.println(c); :}
//     | reverse_exp:revexp      {: RESULT = revexp; :}
//     | concat_exp:conexp       {: RESULT = conexp; :}  
//     | if_exp:ifexp            {: RESULT = ifexp; :}
//     | STRING_LITERAL:s      {: RESULT = s; :}
//     | IDENTIFIER:id         {: RESULT = id.toString(); :}
// ;

// if_exp ::= IF LPAREN prefix_exp:prexp RPAREN LCURLPAREN exp:e1 
// ;


// reverse_exp ::= REVERSE STRING_LITERAL:s     {:System.out.println("StringBuilder input1 = new StringBuilder();");
//                                     System.out.println("input1.append(\"" + s + "\");");
//                                     System.out.println("input1 = input1.reverse();");
//                                     System.out.println("String str1 = input1.toString();");
//                                     System.out.println("System.out.println(str1);");:}

//             | REVERSE IDENTIFIER:id         {:System.out.println("StringBuilder input1 = new StringBuilder();");
//                                               System.out.println("input1.append(" + id + ");");
//                                               System.out.println("input1 = input1.reverse();");
//                                               System.out.println("String str1 = input1.toString();");
//                                               System.out.println("System.out.println(str1);"); :}
// ;

//
//expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
//            | expr:e SEMI                   {: System.out.println(e);:}
//;
//expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
//             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
//             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
//             | MINUS expr:e                 {: RESULT = -e;          :}
//  	         %prec UMINUS
//             | LPAREN expr:e RPAREN	        {: RESULT = e;           :}
//             | NUMBER:n	                    {: RESULT = n;           :}
//             ;
