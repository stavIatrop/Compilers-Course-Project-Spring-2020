/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s) {this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            CONCAT, LPAREN, RPAREN, COMMASEP, LCURLPAREN, RCURLPAREN, IF, ELSE, REVERSE, PREFIX, IDENTIFIER;
terminal String    STRING_LITERAL;        // our scanner provides strings

/*  Non terminals */
non terminal            exp_list, idList, body;
non terminal String str, reverse_exp, exp, call, concat_exp, if_exp, decl;

/**
 *  Precedence Declarations
 */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/**
 *  The Grammar Rules
 */

decl ::= IDENTIFIER:id LPAREN idList:idl RPAREN LCURLPAREN body:bd RCURLPAREN       {: System.out.println(id + " (" + idl + "){\n\t" + bd + "\n}");:}
;

call :: IDENTIFIER:id LPAREN exp_list:expl RPAREN                                   {: System.out.println(id + " (" + expl + ")" ); :}
;

exp ::= call
    | reverse_exp
    | concat_exp
    | if_exp
    | STRING_LITERAL:s      {: System.out.println("System.out.println(\"" + s + "\");"); :}
    | IDENTIFIER:id         {: System.out.println("System.out.println(" + id + ");"); :}
;

reverse_exp ::= REVERSE STRING_LITERAL:s     {:System.out.println("StringBuilder input1 = new StringBuilder();");
                                    System.out.println("input1.append(\"" + s + "\");");
                                    System.out.println("input1 = input1.reverse();");
                                    System.out.println("String str1 = input1.toString();");
                                    System.out.println("System.out.println(str1);");:}

            | REVERSE IDENTIFIER:id         {:System.out.println("StringBuilder input1 = new StringBuilder();");
                                              System.out.println("input1.append(" + id + ");");
                                              System.out.println("input1 = input1.reverse();");
                                              System.out.println("String str1 = input1.toString();");
                                              System.out.println("System.out.println(str1);"); :}
;

//
//expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
//            | expr:e SEMI                   {: System.out.println(e);:}
//;
//expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
//             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
//             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
//             | MINUS expr:e                 {: RESULT = -e;          :}
//  	         %prec UMINUS
//             | LPAREN expr:e RPAREN	        {: RESULT = e;           :}
//             | NUMBER:n	                    {: RESULT = n;           :}
//             ;
